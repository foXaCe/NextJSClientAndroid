package com.nextjsclient.android.ui.overview

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Bundle
import androidx.localbroadcastmanager.content.LocalBroadcastManager
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.viewModelScope
import com.google.android.material.snackbar.Snackbar
import com.nextjsclient.android.R
import com.nextjsclient.android.SettingsActivity
import com.nextjsclient.android.databinding.FragmentOverviewBinding
import com.nextjsclient.android.ui.scamark.ScamarkViewModel
import kotlinx.coroutines.launch
import kotlinx.coroutines.async
import kotlinx.coroutines.coroutineScope
import com.nextjsclient.android.utils.CountUpAnimator
import com.nextjsclient.android.data.models.ScamarkStats
import com.nextjsclient.android.utils.SupplierPreferences

class OverviewFragment : Fragment() {
    
    private var _binding: FragmentOverviewBinding? = null
    val binding get() = _binding!!
    
    private val viewModel: ScamarkViewModel by activityViewModels()
    lateinit var supplierPreferences: SupplierPreferences
    
    // Helper pour l'interface moderne
    private lateinit var modernHelper: ModernOverviewHelper
    
    // Stocker les produits de la semaine pr√©c√©dente pour calcul entrants/sortants
    private var previousWeekProducts: List<com.nextjsclient.android.data.models.ScamarkProduct> = emptyList()
    
    // Cache des donn√©es par fournisseur pour navigation instantan√©e
    private var preloadedAnecoopProducts: List<com.nextjsclient.android.data.models.ScamarkProduct> = emptyList()
    private var preloadedSolagoraProducts: List<com.nextjsclient.android.data.models.ScamarkProduct> = emptyList()
    private var preloadedAnecoopWeeks: List<com.nextjsclient.android.data.models.AvailableWeek> = emptyList()
    private var preloadedSolagoraWeeks: List<com.nextjsclient.android.data.models.AvailableWeek> = emptyList()
    
    // BroadcastReceiver pour √©couter les changements de pr√©f√©rences
    private val preferencesReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            if (intent?.action == SupplierPreferences.ACTION_SUPPLIER_PREFERENCES_CHANGED) {
                android.util.Log.d("OverviewFragment", "üì° Received preferences changed broadcast - refreshing cards")
                // Recalculer et afficher les stats avec les nouvelles pr√©f√©rences
                viewModel.products.value?.let { products ->
                    calculateAndDisplayStats(products)
                }
            }
        }
    }
    
    
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentOverviewBinding.inflate(inflater, container, false)
        return binding.root
    }
    
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        android.util.Log.d("OverviewFragment", "üöÄ OverviewFragment.onViewCreated() D√âBUT")
        
        // Initialiser les pr√©f√©rences fournisseurs
        supplierPreferences = SupplierPreferences(requireContext())
        
        // Initialiser le helper moderne
        modernHelper = ModernOverviewHelper(this)
        
        // Initialiser la visibilit√© des cartes selon les pr√©f√©rences
        initializeCardVisibility()
        
        setupButtons()
        setupSwipeRefresh()
        observeViewModel()
        
        // V√©rifier s'il y a une semaine d√©j√† s√©lectionn√©e
        val selectedYear = viewModel.selectedYear.value
        val selectedWeek = viewModel.selectedWeek.value
        
        android.util.Log.d("OverviewFragment", "üîç √âtat du ViewModel au d√©marrage:")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ selectedYear: $selectedYear")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ selectedWeek: $selectedWeek")
        
        if (selectedYear != null && selectedWeek != null) {
            // PRIORIT√â: Utiliser la semaine d√©j√† s√©lectionn√©e dans le ViewModel
            android.util.Log.d("OverviewFragment", "üìÖ ‚úÖ Utilisation de la semaine d√©j√† s√©lectionn√©e: $selectedYear-$selectedWeek")
            loadDataForWeek(selectedYear, selectedWeek)
        } else {
            // Fallback seulement si aucune semaine n'est vraiment s√©lectionn√©e
            val calendar = java.util.Calendar.getInstance()
            val currentYear = calendar.get(java.util.Calendar.YEAR)
            val currentWeek = getCurrentISOWeek()
            android.util.Log.d("OverviewFragment", "üìÖ ‚ö†Ô∏è FALLBACK: Aucune semaine s√©lectionn√©e, initialisation avec la semaine actuelle: $currentYear-$currentWeek")
            viewModel.selectWeek(currentYear, currentWeek)
            loadDataForWeek(currentYear, currentWeek)
        }
        
        android.util.Log.d("OverviewFragment", "‚úÖ OverviewFragment.onViewCreated() FIN")
    }
    
    override fun onResume() {
        super.onResume()
        // Enregistrer le BroadcastReceiver pour √©couter les changements de pr√©f√©rences
        val filter = IntentFilter(SupplierPreferences.ACTION_SUPPLIER_PREFERENCES_CHANGED)
        LocalBroadcastManager.getInstance(requireContext()).registerReceiver(preferencesReceiver, filter)
        android.util.Log.d("OverviewFragment", "üì° BroadcastReceiver registered for preferences changes")
        
        // Mettre √† jour la visibilit√© des cartes au cas o√π les pr√©f√©rences auraient chang√©
        // pendant que le fragment √©tait en pause (ex: dans les param√®tres)
        updateCardVisibilityOnResume()
    }
    
    override fun onPause() {
        super.onPause()
        // D√©senregistrer le BroadcastReceiver
        LocalBroadcastManager.getInstance(requireContext()).unregisterReceiver(preferencesReceiver)
        android.util.Log.d("OverviewFragment", "üì° BroadcastReceiver unregistered")
    }
    
    private fun initializeCardVisibility() {
        // Appliquer imm√©diatement la visibilit√© des cartes selon les pr√©f√©rences
        val anecoopCard = binding.root.findViewById<View>(R.id.anecoopModernCard)
        val solagoraCard = binding.root.findViewById<View>(R.id.solagoraModernCard)
        
        anecoopCard?.visibility = if (supplierPreferences.isAnecoopEnabled) View.VISIBLE else View.GONE
        solagoraCard?.visibility = if (supplierPreferences.isSolagoraEnabled) View.VISIBLE else View.GONE
        
        android.util.Log.d("OverviewFragment", "üé¨ Initial card visibility - Anecoop: ${if (supplierPreferences.isAnecoopEnabled) "VISIBLE" else "GONE"}, Solagora: ${if (supplierPreferences.isSolagoraEnabled) "VISIBLE" else "GONE"}")
    }
    
    private fun updateCardVisibilityOnResume() {
        // Mettre √† jour la visibilit√© et recalculer les stats si n√©cessaire
        val anecoopCard = binding.root.findViewById<View>(R.id.anecoopModernCard)
        val solagoraCard = binding.root.findViewById<View>(R.id.solagoraModernCard)
        
        val newAnecoopVisibility = if (supplierPreferences.isAnecoopEnabled) View.VISIBLE else View.GONE
        val newSolagoraVisibility = if (supplierPreferences.isSolagoraEnabled) View.VISIBLE else View.GONE
        
        val visibilityChanged = (anecoopCard?.visibility != newAnecoopVisibility) || 
                               (solagoraCard?.visibility != newSolagoraVisibility)
        
        if (visibilityChanged) {
            anecoopCard?.visibility = newAnecoopVisibility
            solagoraCard?.visibility = newSolagoraVisibility
            
            android.util.Log.d("OverviewFragment", "üîÑ Card visibility changed on resume - recalculating stats")
            
            // Recalculer et afficher les stats avec les nouvelles pr√©f√©rences
            viewModel.products.value?.let { products ->
                calculateAndDisplayStats(products)
            }
        } else {
            android.util.Log.d("OverviewFragment", "‚úÖ Card visibility unchanged on resume")
        }
    }
    
    private fun loadInitialData() {
        android.util.Log.d("OverviewFragment", "üìä loadInitialData() D√âBUT")
        
        // Utiliser la semaine s√©lectionn√©e dans le ViewModel
        val selectedYear = viewModel.selectedYear.value
        val selectedWeek = viewModel.selectedWeek.value
        
        // Si aucune semaine n'est s√©lectionn√©e, utiliser la semaine actuelle comme fallback
        val (targetYear, targetWeek) = if (selectedYear != null && selectedWeek != null) {
            Pair(selectedYear, selectedWeek)
        } else {
            val calendar = java.util.Calendar.getInstance()
            val currentYear = calendar.get(java.util.Calendar.YEAR)
            val currentWeek = getCurrentISOWeek()
            Pair(currentYear, currentWeek)
        }
        
        android.util.Log.d("OverviewFragment", "üìÖ Chargement des donn√©es pour: $targetYear-$targetWeek")
        
        viewModel.viewModelScope.launch {
            try {
                val startTime = System.currentTimeMillis()
                val repository = com.nextjsclient.android.data.repository.FirebaseRepository()
                
                // Charger les donn√©es en parall√®le avec coroutines
                val currentProductsDeferred = async {
                    android.util.Log.d("OverviewFragment", "üîÑ Chargement semaine s√©lectionn√©e: $targetYear-$targetWeek")
                    repository.getWeekDecisions(targetYear, targetWeek, "all")
                }
                
                val (previousYear, previousWeek) = getPreviousWeek(targetYear, targetWeek)
                val previousProductsDeferred = async {
                    android.util.Log.d("OverviewFragment", "üîÑ Chargement semaine pr√©c√©dente: $previousYear-$previousWeek")
                    repository.getWeekDecisions(previousYear, previousWeek, "all")
                }
                
                // Pr√©charger les donn√©es des fournisseurs en parall√®le
                val anecoopDeferred = async {
                    repository.getWeekDecisions(targetYear, targetWeek, "anecoop")
                }
                
                val solagoraDeferred = async {
                    repository.getWeekDecisions(targetYear, targetWeek, "solagora")
                }
                
                val weeksAnecoopDeferred = async {
                    repository.getAvailableWeeks("anecoop")
                }
                
                val weeksSolagoraDeferred = async {
                    repository.getAvailableWeeks("solagora")
                }
                
                // Attendre tous les r√©sultats
                val currentProducts = currentProductsDeferred.await()
                previousWeekProducts = previousProductsDeferred.await()
                preloadedAnecoopProducts = anecoopDeferred.await()
                preloadedSolagoraProducts = solagoraDeferred.await()
                preloadedAnecoopWeeks = weeksAnecoopDeferred.await()
                preloadedSolagoraWeeks = weeksSolagoraDeferred.await()
                
                val loadTime = System.currentTimeMillis() - startTime
                android.util.Log.d("OverviewFragment", "‚ö° Chargement parall√®le termin√© en ${loadTime}ms")
                android.util.Log.d("OverviewFragment", "   ‚Ä¢ Semaine courante: ${currentProducts.size} produits")
                android.util.Log.d("OverviewFragment", "   ‚Ä¢ Semaine pr√©c√©dente: ${previousWeekProducts.size} produits")
                android.util.Log.d("OverviewFragment", "   ‚Ä¢ Anecoop pr√©charg√©: ${preloadedAnecoopProducts.size} produits")
                android.util.Log.d("OverviewFragment", "   ‚Ä¢ Solagora pr√©charg√©: ${preloadedSolagoraProducts.size} produits")
                
                // Mettre √† jour les UI sur le thread principal
                activity?.runOnUiThread {
                    if (_binding != null && isAdded) {
                        android.util.Log.d("OverviewFragment", "üî• EX√âCUTION viewModel.setProducts sur UI thread")
                        // Mettre √† jour les produits dans le ViewModel
                        viewModel.setProducts(currentProducts)
                        
                        // Maintenant que previousWeekProducts est charg√©, recalculer les stats correctement
                        android.util.Log.d("OverviewFragment", "üîÑ Recalcul des stats avec donn√©es de semaine pr√©c√©dente")
                        calculateAndDisplayStats(currentProducts)
                    }
                }
                
            } catch (e: Exception) {
                android.util.Log.e("OverviewFragment", "‚ùå Erreur loadInitialData: ${e.message}", e)
                activity?.runOnUiThread {
                    if (_binding != null && isAdded) {
                        com.google.android.material.snackbar.Snackbar.make(
                            binding.root,
                            "Erreur lors du chargement des donn√©es: ${e.message}",
                            com.google.android.material.snackbar.Snackbar.LENGTH_LONG
                        ).show()
                    }
                }
            }
        }
    }
    
    /**
     * Charge les donn√©es pour une semaine sp√©cifique (utilis√© quand on vient d'une page fournisseur)
     */
    private fun loadDataForWeek(year: Int, week: Int) {
        val timestamp = System.currentTimeMillis()
        android.util.Log.d("OverviewFragment", "üìä APPEL loadDataForWeek() pour $year-$week - Time: $timestamp")
        
        viewModel.viewModelScope.launch {
            try {
                val startTime = System.currentTimeMillis()
                val repository = com.nextjsclient.android.data.repository.FirebaseRepository()
                
                // Charger les donn√©es de la semaine demand√©e
                val weekProducts = repository.getWeekDecisions(year, week, "all")
                
                // Charger la semaine pr√©c√©dente pour calculer entrants/sortants
                val (previousYear, previousWeek) = getPreviousWeek(year, week)
                previousWeekProducts = repository.getWeekDecisions(previousYear, previousWeek, "all")
                
                val loadTime = System.currentTimeMillis() - startTime
                android.util.Log.d("OverviewFragment", "‚ö° Donn√©es de la semaine $year-$week charg√©es en ${loadTime}ms")
                android.util.Log.d("OverviewFragment", "   ‚Ä¢ Semaine $year-$week: ${weekProducts.size} produits")
                android.util.Log.d("OverviewFragment", "   ‚Ä¢ Semaine pr√©c√©dente: ${previousWeekProducts.size} produits")
                
                // Mettre √† jour l'UI
                android.util.Log.d("OverviewFragment", "üì§ APPEL viewModel.setProducts avec ${weekProducts.size} produits")
                activity?.runOnUiThread {
                    if (_binding != null && isAdded) {
                        android.util.Log.d("OverviewFragment", "üî• EX√âCUTION viewModel.setProducts sur UI thread")
                        viewModel.setProducts(weekProducts)
                        
                        // Maintenant que previousWeekProducts est charg√©, recalculer les stats correctement
                        android.util.Log.d("OverviewFragment", "üîÑ Recalcul des stats avec donn√©es de semaine pr√©c√©dente")
                        calculateAndDisplayStats(weekProducts)
                    }
                }
                
            } catch (e: Exception) {
                android.util.Log.e("OverviewFragment", "‚ùå Erreur loadDataForWeek: ${e.message}", e)
                activity?.runOnUiThread {
                    if (_binding != null && isAdded) {
                        com.google.android.material.snackbar.Snackbar.make(
                            binding.root,
                            "Erreur lors du chargement de la semaine: ${e.message}",
                            com.google.android.material.snackbar.Snackbar.LENGTH_LONG
                        ).show()
                    }
                }
            }
        }
    }
    
    private fun setupButtons() {
        // Settings button
        binding.settingsButton.setOnClickListener {
            android.util.Log.d("OverviewFragment", "‚öôÔ∏è === NAVIGATION VERS SETTINGS (depuis OverviewFragment) ===")
            
            // Marquer comme navigation interne dans MainActivity
            val mainActivity = activity as? com.nextjsclient.android.MainActivity
            mainActivity?.markInternalNavigation()
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ Navigation interne marqu√©e dans MainActivity")
            
            val intent = Intent(requireContext(), SettingsActivity::class.java)
            startActivity(intent)
        }
    }
    
    private fun setupSwipeRefresh() {
        binding.swipeRefresh.apply {
            // Configurer les couleurs du loader
            setColorSchemeResources(
                R.color.md_theme_light_primary,
                R.color.md_theme_light_secondary,
                R.color.md_theme_light_tertiary
            )
            
            // Action de refresh
            setOnRefreshListener {
                viewModel.refresh()
            }
        }
    }
    
    private fun observeViewModel() {
        android.util.Log.d("OverviewFragment", "üîß SETUP observer viewModel.products")
        
        var lastProcessedProducts: List<com.nextjsclient.android.data.models.ScamarkProduct>? = null
        
        viewModel.products.observe(viewLifecycleOwner) { products ->
            val timestamp = System.currentTimeMillis()
            
            android.util.Log.d("OverviewFragment", "üìä OBSERVER D√âCLENCH√â - Timestamp: $timestamp")
            android.util.Log.d("OverviewFragment", "üìä Products observ√©s: ${products.size} produits totaux")
            
            // V√©rifier si c'est exactement la m√™me liste que la derni√®re fois
            if (products == lastProcessedProducts) {
                android.util.Log.d("OverviewFragment", "‚è≠Ô∏è IGNOR√â - Liste identique √† la pr√©c√©dente")
                return@observe
            }
            
            android.util.Log.d("OverviewFragment", "üî• NOUVELLE LISTE - Traitement requis")
            lastProcessedProducts = products
            
            products.groupBy { it.supplier.lowercase() }.forEach { (supplier, prods) ->
                android.util.Log.d("OverviewFragment", "   ‚Ä¢ $supplier: ${prods.size} produits")
            }
            
            // Calculer et afficher les stats en une seule fois
            calculateAndDisplayStats(products)
        }
        
        // Observer les changements de semaine (pour affichage et chargement de donn√©es)
        var isInitialLoad = true
        viewModel.selectedWeek.observe(viewLifecycleOwner) { week ->
            viewModel.selectedYear.observe(viewLifecycleOwner) { year ->
                if (week != null && year != null) {
                    // Toujours mettre √† jour l'affichage
                    updateWeekDisplay(year, week)
                    
                    if (!isInitialLoad) {
                        // Charger les donn√©es seulement si ce n'est pas le chargement initial
                        android.util.Log.d("OverviewFragment", "üìÖ Changement de semaine d√©tect√©: $year-$week")
                        loadDataForWeek(year, week)
                    } else {
                        android.util.Log.d("OverviewFragment", "üìÖ Semaine initiale d√©tect√©e: $year-$week")
                        isInitialLoad = false
                    }
                }
            }
        }
        
        viewModel.isLoading.observe(viewLifecycleOwner) { isLoading ->
            binding.swipeRefresh.isRefreshing = isLoading
            binding.loadingOverlay.visibility = View.GONE // Ne plus utiliser l'overlay de chargement
        }
        
        viewModel.error.observe(viewLifecycleOwner) { error ->
            error?.let {
                Snackbar.make(binding.root, it, Snackbar.LENGTH_LONG).show()
                viewModel.clearError()
            }
        }
    }
    
    
    private fun calculateAndDisplayStats(products: List<com.nextjsclient.android.data.models.ScamarkProduct>) {
        val startTime = System.currentTimeMillis()
        val stackTrace = Thread.currentThread().stackTrace.take(6).joinToString("\n") { "  $it" }
        
        android.util.Log.d("OverviewFragment", "üîÑ D√âBUT calculateAndDisplayStats pour ${products.size} produits - Time: $startTime")
        android.util.Log.d("OverviewFragment", "üîÑ Appel√© depuis:\n$stackTrace")
        
        // Appliquer le filtre fournisseur selon les pr√©f√©rences
        val filteredProducts = products.filter { product ->
            val supplier = product.supplier.lowercase()
            when (supplier) {
                "anecoop" -> supplierPreferences.isAnecoopEnabled
                "solagora" -> supplierPreferences.isSolagoraEnabled
                else -> true // Garder les autres fournisseurs inconnus
            }
        }
        
        android.util.Log.d("OverviewFragment", "üéØ FILTRE FOURNISSEUR: ${products.size} -> ${filteredProducts.size} produits")
        android.util.Log.d("OverviewFragment", "üéØ Anecoop=${supplierPreferences.isAnecoopEnabled}, Solagora=${supplierPreferences.isSolagoraEnabled}")
        
        // S√©parer par fournisseur (apr√®s filtrage)
        val anecoopProducts = filteredProducts.filter { it.supplier.lowercase() == "anecoop" }
        val solagoraProducts = filteredProducts.filter { it.supplier.lowercase() == "solagora" }
        
        android.util.Log.d("OverviewFragment", "üìä R√©partition: Anecoop=${anecoopProducts.size}, Solagora=${solagoraProducts.size}")
        
        // Appliquer le m√™me filtre √† la semaine pr√©c√©dente
        val filteredPreviousProducts = previousWeekProducts.filter { product ->
            val supplier = product.supplier.lowercase()
            when (supplier) {
                "anecoop" -> supplierPreferences.isAnecoopEnabled
                "solagora" -> supplierPreferences.isSolagoraEnabled
                else -> true
            }
        }
        
        // S√©parer semaine pr√©c√©dente par fournisseur  
        val previousAnecoopProducts = filteredPreviousProducts.filter { it.supplier.lowercase() == "anecoop" }
        val previousSolagoraProducts = filteredPreviousProducts.filter { it.supplier.lowercase() == "solagora" }
        
        android.util.Log.d("OverviewFragment", "üìä Semaine pr√©c√©dente: Anecoop=${previousAnecoopProducts.size}, Solagora=${previousSolagoraProducts.size}")
        
        // Calculer les stats
        android.util.Log.d("OverviewFragment", "üßÆ Calcul stats Anecoop...")
        val anecoopStats = calculateStatsForProducts(anecoopProducts, previousAnecoopProducts)
        
        android.util.Log.d("OverviewFragment", "üßÆ Calcul stats Solagora...")
        val solagoraStats = calculateStatsForProducts(solagoraProducts, previousSolagoraProducts)
        
        android.util.Log.d("OverviewFragment", "‚úÖ Stats calcul√©es - Anecoop: $anecoopStats")
        android.util.Log.d("OverviewFragment", "‚úÖ Stats calcul√©es - Solagora: $solagoraStats")
        
        // Mettre √† jour les dashboards simultan√©ment
        android.util.Log.d("OverviewFragment", "üé® D√âBUT animations dashboards")
        updateSupplierDashboard("anecoop", anecoopStats)
        updateSupplierDashboard("solagora", solagoraStats)
        
        val endTime = System.currentTimeMillis()
        android.util.Log.d("OverviewFragment", "‚úÖ FIN calculateAndDisplayStats - Dur√©e: ${endTime - startTime}ms")
    }
    
    private fun calculateStatsForProducts(
        products: List<com.nextjsclient.android.data.models.ScamarkProduct>,
        previousProducts: List<com.nextjsclient.android.data.models.ScamarkProduct> = emptyList()
    ): com.nextjsclient.android.data.models.ScamarkStats {
        val totalProducts = products.size
        val totalPromos = products.count { it.isPromo }
        val uniqueClients = products.flatMap { it.decisions.map { d -> d.codeClient } }.distinct().size
        
        // Calculer les produits entrants et sortants par rapport √† la semaine pr√©c√©dente
        val (productsIn, productsOut) = calculateProductsInOut(products, previousProducts)
        
        return com.nextjsclient.android.data.models.ScamarkStats(
            totalProducts = totalProducts,
            activeClients = uniqueClients,
            productsIn = productsIn,
            productsOut = productsOut,  
            totalPromos = totalPromos
        )
    }
    
    /**
     * Calcule les produits entrants et sortants par rapport √† la semaine pr√©c√©dente
     */
    private fun calculateProductsInOut(
        currentProducts: List<com.nextjsclient.android.data.models.ScamarkProduct>,
        previousProducts: List<com.nextjsclient.android.data.models.ScamarkProduct>
    ): Pair<Int, Int> {
        if (previousProducts.isEmpty()) {
            android.util.Log.d("OverviewFragment", "üìä Pas de donn√©es de semaine pr√©c√©dente, retour 0,0")
            return Pair(0, 0)
        }
        
        // Obtenir les codes produits de chaque semaine
        val currentProductCodes = currentProducts.map { it.productName }.toSet()
        val previousProductCodes = previousProducts.map { it.productName }.toSet()
        
        android.util.Log.d("OverviewFragment", "üìã Semaine actuelle: ${currentProductCodes.size} produits uniques")
        android.util.Log.d("OverviewFragment", "üìã Semaine pr√©c√©dente: ${previousProductCodes.size} produits uniques")
        
        // Produits entrants: pr√©sents cette semaine mais pas la semaine derni√®re
        val newProducts = currentProductCodes.subtract(previousProductCodes)
        val productsIn = newProducts.size
        
        // Produits sortants: pr√©sents la semaine derni√®re mais pas cette semaine
        val removedProducts = previousProductCodes.subtract(currentProductCodes)
        val productsOut = removedProducts.size
        
        if (productsIn > 0) {
            android.util.Log.d("OverviewFragment", "‚ûï ${productsIn} produits ENTRANTS:")
            newProducts.take(3).forEach { product ->
                android.util.Log.d("OverviewFragment", "   ‚Ä¢ $product")
            }
        }
        
        if (productsOut > 0) {
            android.util.Log.d("OverviewFragment", "‚ûñ ${productsOut} produits SORTANTS:")
            removedProducts.take(3).forEach { product ->
                android.util.Log.d("OverviewFragment", "   ‚Ä¢ $product")
            }
        }
        
        return Pair(productsIn, productsOut)
    }
    
    /**
     * Charge les donn√©es de la semaine pr√©c√©dente pour calcul des entrants/sortants
     * NOTE: Cette m√©thode n'est plus utilis√©e car le chargement est fait en parall√®le dans loadInitialData()
     */
    private fun loadPreviousWeekData(_currentYear: Int, _currentWeek: Int) {
        // M√©thode conserv√©e pour compatibilit√© mais ne fait plus rien
        return
    }
    
    /**
     * Calcule la semaine pr√©c√©dente (g√®re le passage d'ann√©e)
     */
    private fun getPreviousWeek(year: Int, week: Int): Pair<Int, Int> {
        return if (week > 1) {
            Pair(year, week - 1)
        } else {
            Pair(year - 1, 52) // Derni√®re semaine de l'ann√©e pr√©c√©dente
        }
    }
    
    /**
     * Pr√©charge les donn√©es des deux fournisseurs pour la semaine s√©lectionn√©e
     * NOTE: Cette m√©thode n'est plus utilis√©e car le chargement est fait en parall√®le dans loadInitialData()
     */
    private fun preloadSupplierData(_year: Int, _week: Int) {
        // M√©thode conserv√©e pour compatibilit√© mais ne fait plus rien
        return
    }
    
    private fun updateSupplierDashboard(supplier: String, stats: ScamarkStats) {
        val timestamp = System.currentTimeMillis()
        android.util.Log.d("OverviewFragment", "üé® D√âBUT updateSupplierDashboard $supplier - Time: $timestamp")
        android.util.Log.d("OverviewFragment", "üé® Stats pour $supplier: $stats")
        
        // D√©l√©guer √† ModernOverviewHelper pour la nouvelle UI moderne
        val isAnecoop = supplier.lowercase() == "anecoop"
        modernHelper.updateSupplierCard(supplier, stats, isAnecoop)
        
        val endTimestamp = System.currentTimeMillis()
        android.util.Log.d("OverviewFragment", "‚úÖ FIN updateSupplierDashboard $supplier - Time: $endTimestamp")
    }
    
    
    private fun getCurrentISOWeek(): Int {
        val calendar = java.util.Calendar.getInstance()
        val date = calendar.time
        
        calendar.time = date
        val dayOfWeek = (calendar.get(java.util.Calendar.DAY_OF_WEEK) + 5) % 7
        calendar.add(java.util.Calendar.DAY_OF_YEAR, -dayOfWeek + 3)
        val firstThursday = calendar.timeInMillis
        
        calendar.set(java.util.Calendar.MONTH, 0)
        calendar.set(java.util.Calendar.DAY_OF_MONTH, 1)
        if (calendar.get(java.util.Calendar.DAY_OF_WEEK) != java.util.Calendar.THURSDAY) {
            val daysToAdd = (4 - calendar.get(java.util.Calendar.DAY_OF_WEEK) + 7) % 7
            calendar.add(java.util.Calendar.DAY_OF_YEAR, daysToAdd)
        }
        
        return 1 + ((firstThursday - calendar.timeInMillis) / (7 * 24 * 60 * 60 * 1000)).toInt()
    }
    
    
    private fun navigateToSupplier(supplier: String) {
        android.util.Log.d("OverviewFragment", "üîÑ Navigation vers $supplier avec donn√©es pr√©charg√©es")
        
        // Obtenir les donn√©es pr√©charg√©es pour ce fournisseur
        val preloadedProducts = when (supplier) {
            "anecoop" -> preloadedAnecoopProducts
            "solagora" -> preloadedSolagoraProducts
            else -> emptyList()
        }
        
        val preloadedWeeks = when (supplier) {
            "anecoop" -> preloadedAnecoopWeeks
            "solagora" -> preloadedSolagoraWeeks
            else -> emptyList()
        }
        
        android.util.Log.d("OverviewFragment", "üì¶ Donn√©es disponibles: ${preloadedProducts.size} produits, ${preloadedWeeks.size} semaines")
        
        // Stocker les donn√©es pr√©charg√©es dans un cache global accessible par MainActivity
        val mainActivity = activity as? com.nextjsclient.android.MainActivity
        mainActivity?.let { activity ->
            // Passer les donn√©es pr√©charg√©es √† l'activit√©
            activity.setPreloadedData(supplier, preloadedProducts, preloadedWeeks)
            
            // Naviguer vers le fournisseur
            val bottomNav = activity.findViewById<com.google.android.material.bottomnavigation.BottomNavigationView>(com.nextjsclient.android.R.id.bottom_navigation)
            bottomNav?.selectedItemId = when (supplier) {
                "anecoop" -> com.nextjsclient.android.R.id.navigation_anecoop
                "solagora" -> com.nextjsclient.android.R.id.navigation_solagora
                else -> com.nextjsclient.android.R.id.navigation_anecoop
            }
        }
    }
    
    private fun navigateToSupplierWithFilter(supplier: String, filter: String) {
        android.util.Log.d("OverviewFragment", "üîÑ Navigation vers $supplier avec filtre: $filter")
        
        // Obtenir les donn√©es pr√©charg√©es pour ce fournisseur
        val preloadedProducts = when (supplier) {
            "anecoop" -> preloadedAnecoopProducts
            "solagora" -> preloadedSolagoraProducts
            else -> emptyList()
        }
        
        val preloadedWeeks = when (supplier) {
            "anecoop" -> preloadedAnecoopWeeks
            "solagora" -> preloadedSolagoraWeeks
            else -> emptyList()
        }
        
        android.util.Log.d("OverviewFragment", "üìä Donn√©es disponibles pour $supplier: ${preloadedProducts.size} produits, ${preloadedWeeks.size} semaines")
        
        // Debug: afficher les premiers produits et leurs fournisseurs
        preloadedProducts.take(5).forEach { product ->
            android.util.Log.d("OverviewFragment", "   üîç Produit pr√©charg√©: '${product.productName}' - Fournisseur: '${product.supplier}'")
        }
        
        // Stocker les donn√©es pr√©charg√©es dans un cache global accessible par MainActivity
        val mainActivity = activity as? com.nextjsclient.android.MainActivity
        mainActivity?.let { activity ->
            // Si pas de donn√©es pr√©charg√©es, ne pas mettre en cache - mais stocker le filtre quand m√™me
            if (preloadedProducts.isNotEmpty()) {
                android.util.Log.d("OverviewFragment", "‚úÖ Utilisation des donn√©es pr√©charg√©es")
                activity.setPreloadedDataWithFilter(supplier, preloadedProducts, preloadedWeeks, filter)
            } else {
                android.util.Log.d("OverviewFragment", "‚ö†Ô∏è Pas de donn√©es pr√©charg√©es - stockage du filtre seulement")
                // Stocker seulement le filtre, pas de donn√©es vides
                activity.setFilterOnly(supplier, filter)
            }
            
            // Naviguer vers le fournisseur
            val bottomNav = activity.findViewById<com.google.android.material.bottomnavigation.BottomNavigationView>(com.nextjsclient.android.R.id.bottom_navigation)
            bottomNav?.selectedItemId = when (supplier) {
                "anecoop" -> com.nextjsclient.android.R.id.navigation_anecoop
                "solagora" -> com.nextjsclient.android.R.id.navigation_solagora
                else -> com.nextjsclient.android.R.id.navigation_anecoop
            }
        }
    }
    
    private fun navigateToSupplierWithEntrantsFilter(supplier: String, filter: String) {
        android.util.Log.d("OverviewFragment", "üü¢üü¢üü¢ D√âBUT navigateToSupplierWithEntrantsFilter")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Supplier: $supplier")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Filter: $filter")
        
        // Pour les produits entrants, on doit identifier ceux qui sont nouveaux cette semaine
        val currentSupplierProducts = when (supplier) {
            "anecoop" -> preloadedAnecoopProducts
            "solagora" -> preloadedSolagoraProducts
            else -> emptyList()
        }
        
        val previousWeekSupplierProducts = previousWeekProducts.filter { 
            it.supplier.lowercase() == supplier.lowercase() 
        }
        
        // Calculer les vrais entrants : pr√©sents cette semaine mais pas la semaine derni√®re
        val previousProductNames = previousWeekSupplierProducts.map { it.productName }.toSet()
        val entrantProducts = currentSupplierProducts.filter { 
            !previousProductNames.contains(it.productName)
        }
        
        android.util.Log.d("OverviewFragment", "üì¶ Calcul des entrants pour $supplier:")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Produits semaine actuelle: ${currentSupplierProducts.size}")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Produits semaine pr√©c√©dente: ${previousWeekSupplierProducts.size}")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ VRAIS ENTRANTS: ${entrantProducts.size}")
        entrantProducts.take(3).forEach { product ->
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ Entrant: ${product.productName}")
        }
        
        val preloadedWeeks = when (supplier) {
            "anecoop" -> preloadedAnecoopWeeks
            "solagora" -> preloadedSolagoraWeeks
            else -> emptyList()
        }
        
        android.util.Log.d("OverviewFragment", "üìÖ Semaines disponibles: ${preloadedWeeks.size}")
        
        // Stocker les donn√©es dans un cache global accessible par MainActivity
        val mainActivity = activity as? com.nextjsclient.android.MainActivity
        if (mainActivity != null) {
            android.util.Log.d("OverviewFragment", "‚úÖ MainActivity trouv√©e, appel de setPreloadedDataWithFilter")
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ supplier: $supplier")
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ ENTRANTS √Ä PASSER: ${entrantProducts.size}")
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ filter: $filter")
            
            // Passer SEULEMENT les vrais produits entrants avec le filtre "entrants"
            mainActivity.setPreloadedDataWithFilter(supplier, entrantProducts, preloadedWeeks, filter)
            
            android.util.Log.d("OverviewFragment", "üöÄ Navigation vers le fournisseur $supplier")
            // Naviguer vers le fournisseur
            val bottomNav = mainActivity.findViewById<com.google.android.material.bottomnavigation.BottomNavigationView>(com.nextjsclient.android.R.id.bottom_navigation)
            bottomNav?.selectedItemId = when (supplier) {
                "anecoop" -> com.nextjsclient.android.R.id.navigation_anecoop
                "solagora" -> com.nextjsclient.android.R.id.navigation_solagora
                else -> com.nextjsclient.android.R.id.navigation_anecoop
            }
        } else {
            android.util.Log.e("OverviewFragment", "‚ùå MainActivity null!")
        }
        
        android.util.Log.d("OverviewFragment", "üü¢üü¢üü¢ FIN navigateToSupplierWithEntrantsFilter")
    }
    
    private fun navigateToSupplierWithPreviousWeekFilter(supplier: String, filter: String) {
        android.util.Log.d("OverviewFragment", "üî¥üî¥üî¥ D√âBUT navigateToSupplierWithPreviousWeekFilter")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Supplier: $supplier")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Filter: $filter")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ previousWeekProducts total: ${previousWeekProducts.size}")
        
        // Pour les produits sortants, on doit identifier ceux qui √©taient l√† la semaine derni√®re mais plus maintenant
        val previousWeekSupplierProducts = previousWeekProducts.filter { 
            it.supplier.lowercase() == supplier.lowercase() 
        }
        
        // Produits actuels du fournisseur
        val currentSupplierProducts = when (supplier) {
            "anecoop" -> preloadedAnecoopProducts
            "solagora" -> preloadedSolagoraProducts
            else -> emptyList()
        }
        
        // Calculer les vrais sortants : pr√©sents la semaine derni√®re mais pas cette semaine
        val currentProductNames = currentSupplierProducts.map { it.productName }.toSet()
        val sortantProducts = previousWeekSupplierProducts.filter { 
            !currentProductNames.contains(it.productName)
        }
        
        android.util.Log.d("OverviewFragment", "üì¶ Calcul des sortants pour $supplier:")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Produits semaine pr√©c√©dente: ${previousWeekSupplierProducts.size}")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Produits semaine actuelle: ${currentSupplierProducts.size}")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ VRAIS SORTANTS: ${sortantProducts.size}")
        sortantProducts.take(3).forEach { product ->
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ Sortant: ${product.productName}")
        }
        
        val preloadedWeeks = when (supplier) {
            "anecoop" -> preloadedAnecoopWeeks
            "solagora" -> preloadedSolagoraWeeks
            else -> emptyList()
        }
        
        android.util.Log.d("OverviewFragment", "üìÖ Semaines disponibles: ${preloadedWeeks.size}")
        
        // Stocker les donn√©es dans un cache global accessible par MainActivity
        val mainActivity = activity as? com.nextjsclient.android.MainActivity
        if (mainActivity != null) {
            android.util.Log.d("OverviewFragment", "‚úÖ MainActivity trouv√©e, appel de setPreloadedDataWithFilter")
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ supplier: $supplier")
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ SORTANTS √Ä PASSER: ${sortantProducts.size}")
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ filter: $filter")
            
            // Passer SEULEMENT les vrais produits sortants avec le filtre "sortants"
            mainActivity.setPreloadedDataWithFilter(supplier, sortantProducts, preloadedWeeks, filter)
            
            android.util.Log.d("OverviewFragment", "üöÄ Navigation vers le fournisseur $supplier")
            // Naviguer vers le fournisseur
            val bottomNav = mainActivity.findViewById<com.google.android.material.bottomnavigation.BottomNavigationView>(com.nextjsclient.android.R.id.bottom_navigation)
            bottomNav?.selectedItemId = when (supplier) {
                "anecoop" -> com.nextjsclient.android.R.id.navigation_anecoop
                "solagora" -> com.nextjsclient.android.R.id.navigation_solagora
                else -> com.nextjsclient.android.R.id.navigation_anecoop
            }
        } else {
            android.util.Log.e("OverviewFragment", "‚ùå MainActivity null!")
        }
        
        android.util.Log.d("OverviewFragment", "üî¥üî¥üî¥ FIN navigateToSupplierWithPreviousWeekFilter")
    }
    
    /**
     * Navigation vers un fournisseur avec filtre promotions
     */
    private fun navigateToSupplierWithPromoFilter(supplier: String, filter: String) {
        android.util.Log.d("OverviewFragment", "üî•üî•üî• D√âBUT navigateToSupplierWithPromoFilter")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Supplier: $supplier")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Filter: $filter")
        
        android.util.Log.d("OverviewFragment", "üîç √âtat des donn√©es pr√©charg√©es:")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ preloadedAnecoopProducts: ${preloadedAnecoopProducts.size} produits")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ preloadedSolagoraProducts: ${preloadedSolagoraProducts.size} produits")
        
        // Produits actuels du fournisseur
        val currentSupplierProducts = when (supplier) {
            "anecoop" -> {
                android.util.Log.d("OverviewFragment", "üì¶ S√©lection des produits Anecoop: ${preloadedAnecoopProducts.size}")
                preloadedAnecoopProducts
            }
            "solagora" -> {
                android.util.Log.d("OverviewFragment", "üì¶ S√©lection des produits Solagora: ${preloadedSolagoraProducts.size}")
                preloadedSolagoraProducts
            }
            else -> {
                android.util.Log.d("OverviewFragment", "‚ùå Supplier non reconnu: $supplier")
                emptyList()
            }
        }
        
        // V√©rifier que nous avons des donn√©es √† traiter
        if (currentSupplierProducts.isEmpty()) {
            android.util.Log.e("OverviewFragment", "‚ùå ERREUR: Aucun produit trouv√© pour $supplier!")
            android.util.Log.e("OverviewFragment", "‚ùå Les donn√©es ne sont peut-√™tre pas encore charg√©es, utilisation de la m√©thode normale")
            // Si pas de donn√©es pr√©charg√©es, utiliser la m√©thode normale qui charge les donn√©es
            navigateToSupplierWithFilter(supplier, filter)
            return
        }
        
        // Filtrer seulement les produits en promotion
        val promoProducts = currentSupplierProducts.filter { it.isPromo }
        
        android.util.Log.d("OverviewFragment", "üì¶ Calcul des promotions pour $supplier:")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ Produits totaux: ${currentSupplierProducts.size}")
        android.util.Log.d("OverviewFragment", "   ‚Ä¢ PROMOTIONS: ${promoProducts.size}")
        promoProducts.take(3).forEach { product ->
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ Promo: ${product.productName}")
        }
        
        val preloadedWeeks = when (supplier) {
            "anecoop" -> preloadedAnecoopWeeks
            "solagora" -> preloadedSolagoraWeeks
            else -> emptyList()
        }
        
        android.util.Log.d("OverviewFragment", "üìÖ Semaines disponibles: ${preloadedWeeks.size}")
        
        // Stocker les donn√©es dans un cache global accessible par MainActivity
        val mainActivity = activity as? com.nextjsclient.android.MainActivity
        if (mainActivity != null) {
            android.util.Log.d("OverviewFragment", "‚úÖ MainActivity trouv√©e, appel de setPreloadedDataWithFilter")
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ supplier: $supplier")
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ PROMOTIONS √Ä PASSER: ${promoProducts.size}")
            android.util.Log.d("OverviewFragment", "   ‚Ä¢ filter: $filter")
            
            // Passer SEULEMENT les vrais produits en promotion avec le filtre "promo"
            mainActivity.setPreloadedDataWithFilter(supplier, promoProducts, preloadedWeeks, filter)
            
            android.util.Log.d("OverviewFragment", "üöÄ Navigation vers le fournisseur $supplier")
            // Naviguer vers le fournisseur
            val bottomNav = mainActivity.findViewById<com.google.android.material.bottomnavigation.BottomNavigationView>(com.nextjsclient.android.R.id.bottom_navigation)
            bottomNav?.selectedItemId = when (supplier) {
                "anecoop" -> com.nextjsclient.android.R.id.navigation_anecoop
                "solagora" -> com.nextjsclient.android.R.id.navigation_solagora
                else -> com.nextjsclient.android.R.id.navigation_anecoop
            }
        } else {
            android.util.Log.e("OverviewFragment", "‚ùå MainActivity null!")
        }
        
        android.util.Log.d("OverviewFragment", "üî•üî•üî• FIN navigateToSupplierWithPromoFilter")
    }
    
    /**
     * Met √† jour l'affichage de la semaine en cours
     */
    private fun updateWeekDisplay(year: Int, week: Int) {
        val weekStr = week.toString().padStart(2, '0')
        val dates = formatWeekDatesOnly(year, week)
        val weekShort = getString(R.string.week_short)
        val weekText = "$weekShort$weekStr - $dates"
        
        // Utiliser ModernOverviewHelper pour la nouvelle UI
        modernHelper.updateWeekDisplay(weekText)
    }
    
    /**
     * Formate les dates d'une semaine
     */
    private fun formatWeekDatesOnly(year: Int, week: Int): String {
        val calendar = java.util.Calendar.getInstance()
        calendar.set(java.util.Calendar.YEAR, year)
        calendar.set(java.util.Calendar.WEEK_OF_YEAR, week)
        calendar.set(java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.MONDAY)
        
        val weekStart = calendar.time
        calendar.add(java.util.Calendar.DAY_OF_YEAR, 6)
        val weekEnd = calendar.time
        
        val dateFormat = java.text.SimpleDateFormat("dd/MM", java.util.Locale.getDefault())
        val separator = getString(R.string.date_range_separator)
        
        return "${dateFormat.format(weekStart)} $separator ${dateFormat.format(weekEnd)}"
    }
    
    
    /**
     * M√©thodes de navigation publiques pour ModernOverviewHelper
     */
    fun navigateToSupplierFromCard(supplier: String) {
        navigateToSupplierWithFilter(supplier, "all")
    }
    
    fun navigateToSupplierWithEntrantsFilterFromCard(supplier: String, filter: String) {
        navigateToSupplierWithEntrantsFilter(supplier, filter)
    }
    
    fun navigateToSupplierWithSortantsFilter(supplier: String, filter: String) {
        navigateToSupplierWithPreviousWeekFilter(supplier, filter)
    }
    
    fun navigateToSupplierWithPromoFilterFromCard(supplier: String, filter: String) {
        navigateToSupplierWithPromoFilter(supplier, filter)
    }
    
    fun navigateToSupplierWithoutFilter(supplier: String) {
        navigateToSupplier(supplier)
    }
    
    /**
     * Switch to a specific supplier (called from MainActivity)
     */
    fun switchSupplier(supplier: String) {
        viewModel.selectSupplier(supplier)
    }
    
    
    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}