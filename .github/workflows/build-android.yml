name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/buildOutputCleanup
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/gradle.properties', '**/libs.versions.toml') }}-${{ github.run_number }}
        restore-keys: |
          ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/gradle.properties', '**/libs.versions.toml') }}-
          ${{ runner.os }}-gradle-

    - name: Clean problematic BouncyCastle jars from cache
      run: |
        echo "üßπ Nettoyage s√©lectif des JARs BouncyCastle corrompus..."
        find ~/.gradle/caches -name "bcprov-*.jar" -o -name "bcpkix-*.jar" | xargs rm -f 2>/dev/null || true
        rm -rf ~/.gradle/caches/jars-9/ 2>/dev/null || true
        echo "‚úÖ JARs probl√©matiques supprim√©s du cache"

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "ndk.dir=$ANDROID_HOME/ndk-bundle" >> local.properties

    - name: Setup Firebase config (if available)
      working-directory: ./app
      run: |
        if [ -n "${{ secrets.GOOGLE_SERVICES_JSON }}" ]; then
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > google-services.json
          echo "‚úÖ Firebase config cr√©√© depuis les secrets"
        elif [ -n "${{ secrets.GOOGLE_API_KEY }}" ]; then
          # Remplacer le placeholder par la vraie cl√© API
          sed 's/GOOGLE_API_KEY_PLACEHOLDER/${{ secrets.GOOGLE_API_KEY }}/g' google-services.json > google-services-temp.json
          mv google-services-temp.json google-services.json
          echo "‚úÖ Firebase config mis √† jour avec API key"
        else
          echo "‚ö†Ô∏è  Aucun secret Firebase disponible - utilisation du placeholder"
        fi

    - name: Auto-increment version
      if: github.event_name == 'push'
      run: |
        echo "üî¢ Version sera g√©r√©e automatiquement par Gradle via git commit count"
        echo "‚úÖ Version mise √† jour automatiquement via buildNumber et versionDisplayName"

    - name: Decode Keystore
      if: github.event_name == 'push'
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "üîç Debug keystore vars:"
        echo "KEYSTORE_BASE64 length: ${#KEYSTORE_BASE64}"
        echo "KEYSTORE_PASSWORD set: $([[ -n "$KEYSTORE_PASSWORD" ]] && echo "YES" || echo "NO")"
        
        if [ -n "$KEYSTORE_BASE64" ]; then
          echo "$KEYSTORE_BASE64" | base64 -d > nextjs-client-release.keystore
          echo "‚úÖ Keystore d√©cod√© depuis les secrets"
          echo "üìÇ Keystore path: $(pwd)/nextjs-client-release.keystore"
          ls -la nextjs-client-release.keystore
          
          # Exporter les variables pour que Gradle puisse les voir
          echo "KEYSTORE_BASE64=$KEYSTORE_BASE64" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> $GITHUB_ENV
          echo "KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
          echo "KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV
          
          echo "‚úÖ Variables d'environnement export√©es pour Gradle"
        else
          echo "‚ùå Pas de keystore configur√© - build debug uniquement"
          echo "‚ö†Ô∏è Les secrets GitHub ne sont pas accessibles - v√©rifiez repository settings"
          # Ne pas exit 1, continuer avec debug build
        fi

    - name: Build APK with optimized retry logic
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [ -n "${KEYSTORE_BASE64:-}" ]; then
          echo "üèóÔ∏è Building signed release APK..."
          for i in 1 2 3; do
            echo "Attempt $i/3"
            ./gradlew --no-daemon --parallel --max-workers=2 assembleRelease && break
            if [ $i -lt 3 ]; then
              echo "Build failed, cleaning BouncyCastle and retrying..."
              find ~/.gradle/caches -name "bcprov-*.jar" -o -name "bcpkix-*.jar" | xargs rm -f 2>/dev/null || true
              sleep 5
            fi
          done
        else
          echo "üèóÔ∏è Building debug APK..."
          for i in 1 2 3; do
            echo "Attempt $i/3"
            ./gradlew --no-daemon --parallel --max-workers=2 assembleDebug && break
            if [ $i -lt 3 ]; then
              echo "Build failed, cleaning BouncyCastle and retrying..."
              find ~/.gradle/caches -name "bcprov-*.jar" -o -name "bcpkix-*.jar" | xargs rm -f 2>/dev/null || true
              sleep 5
            fi
          done
        fi
    
    - name: Install build tools
      run: |
        # Install using Android SDK manager instead of apt
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"
        echo "$ANDROID_HOME/build-tools/34.0.0" >> $GITHUB_PATH
    
    - name: Verify APK signature
      if: github.event_name == 'push' && github.actor != 'renovate[bot]'
      run: |
        echo "üîç V√©rification de la signature de l'APK..."
        
        apksigner verify --verbose --print-certs app/build/outputs/apk/release/app-release.apk
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ APK correctement sign√©!"
        else
          echo "‚ùå L'APK n'est pas sign√© correctement!"
          exit 1
        fi


    - name: Generate version info
      id: version
      run: |
        echo "VERSION_NAME=v$(date +'%Y%m%d')-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Upload Release APK (signed)
      uses: actions/upload-artifact@v4
      with:
        name: app-release-signed-${{ steps.version.outputs.COMMIT_HASH }}
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 90


    - name: Get APK info
      id: apk_info
      run: |
        SIGNED_SIZE=$(du -h app/build/outputs/apk/release/app-release.apk | cut -f1)
        echo "SIGNED_SIZE=$SIGNED_SIZE" >> $GITHUB_OUTPUT

    - name: Comment PR with APK info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üì± APK Build Results
          
          **‚úÖ Build Status:** Success
          **üîç Commit:** \`${{ steps.version.outputs.COMMIT_HASH }}\`
          **üìÖ Build Time:** ${{ steps.version.outputs.BUILD_TIME }}
          
          ### üì¶ Generated APK
          | Type | Size | Download |
          |------|------|----------|
          | Release (signed) | ${{ steps.apk_info.outputs.SIGNED_SIZE }} | [Download](../actions/runs/${{ github.run_id }}) |
          
          > üí° APK sign√© disponible dans la section **Artifacts** du workflow.`
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          })

  # Job pour cr√©er des releases nightly (uniquement sur main)
  nightly-release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate version info
      id: version
      run: |
        echo "VERSION_NAME=nightly-$(date +'%Y%m%d')-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        echo "RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_OUTPUT

    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "app-*-${{ steps.version.outputs.COMMIT_HASH }}"
        path: ./apks/
        merge-multiple: true

    - name: Delete existing nightly release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Supprimer la release nightly existante s'il y en a une
        if gh release view nightly >/dev/null 2>&1; then
          gh release delete nightly -y
          echo "‚úÖ Ancienne release nightly supprim√©e"
        fi
        
        # Supprimer le tag nightly existant s'il y en a un
        if git tag | grep -q "^nightly$"; then
          git push --delete origin nightly || true
          echo "‚úÖ Ancien tag nightly supprim√©"
        fi

    - name: Create nightly release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Lire la version de l'APK depuis l'APK compil√©
        if [ -f ./apks/app-release.apk ]; then
          APK_VERSION=$(aapt dump badging ./apks/app-release.apk | grep versionName | sed "s/.*versionName='\([^']*\)'.*/\1/")
          APK_VERSION_CODE=$(aapt dump badging ./apks/app-release.apk | grep versionCode | sed "s/.*versionCode='\([^']*\)'.*/\1/")
        else
          APK_VERSION="1.0.0"
          APK_VERSION_CODE="${{ steps.version.outputs.RUN_NUMBER }}"
        fi
        echo "Version APK: $APK_VERSION (Build $APK_VERSION_CODE)"
        
        # G√©n√©rer le changelog depuis les derniers commits
        CHANGELOG=$(git log --oneline -5 --pretty=format:"- %s" | head -5)
        
        # Renommer l'APK avec le num√©ro de run (style Lawnchair)
        if [ -f ./apks/app-release.apk ]; then
          mv ./apks/app-release.apk "./apks/NextJSClient-run${{ steps.version.outputs.RUN_NUMBER }}-${{ steps.version.outputs.COMMIT_HASH }}.apk"
          echo "‚úÖ APK renomm√© avec run number"
        fi
        
        # Cr√©er la release nightly avec HEREDOC
        cat << EOF > release_notes.md
        ## üöÄ Version de D√©veloppement Automatique
        
        **üì± Version:** $APK_VERSION  
        **üìÖ Build Time:** ${{ steps.version.outputs.BUILD_TIME }}  
        **üîç Commit:** ${{ steps.version.outputs.COMMIT_HASH }}  
        **üî¢ Run Number:** ${{ steps.version.outputs.RUN_NUMBER }}  
        **üåü Branch:** main
        
        ### üìã Derni√®res Modifications
        $CHANGELOG
        
        ### üì± Installation
        1. T√©l√©chargez l'APK sign√© ci-dessous
        2. Activez "Sources inconnues" dans les param√®tres Android
        3. Installez l'APK t√©l√©charg√©
        4. Profitez des derni√®res fonctionnalit√©s !
        
        ### üì¶ APK Disponible
        - **NextJSClient-run${{ steps.version.outputs.RUN_NUMBER }}-${{ steps.version.outputs.COMMIT_HASH }}.apk**: Version release sign√©e avec certificat de production
        EOF
        
        gh release create nightly \
          --title "üåô Nightly Build - $APK_VERSION (Build $APK_VERSION_CODE) - ${{ steps.version.outputs.VERSION_NAME }}" \
          --notes-file release_notes.md \
          --prerelease \
          --latest=false \
          ./apks/*

        echo "‚úÖ Release nightly cr√©√©e avec succ√®s"

    - name: Notification de succ√®s
      run: |
        echo "üéâ Build et release nightly termin√©s avec succ√®s !"
        echo "üì± APKs disponibles dans les artifacts et la release nightly"
        echo "üîó Release: https://github.com/${{ github.repository }}/releases/tag/nightly"