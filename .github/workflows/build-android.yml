name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "ndk.dir=$ANDROID_HOME/ndk-bundle" >> local.properties

    - name: Setup Firebase config (if available)
      working-directory: ./app
      run: |
        if [ -n "${{ secrets.GOOGLE_SERVICES_JSON }}" ]; then
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > google-services.json
          echo "✅ Firebase config créé depuis les secrets"
        elif [ -n "${{ secrets.GOOGLE_API_KEY }}" ]; then
          # Remplacer le placeholder par la vraie clé API
          sed 's/GOOGLE_API_KEY_PLACEHOLDER/${{ secrets.GOOGLE_API_KEY }}/g' google-services.json > google-services-temp.json
          mv google-services-temp.json google-services.json
          echo "✅ Firebase config mis à jour avec API key"
        else
          echo "⚠️  Aucun secret Firebase disponible - utilisation du placeholder"
        fi

    - name: Auto-increment version
      run: |
        # Lire la version actuelle
        CURRENT_VERSION=$(grep "versionName" app/build.gradle | sed 's/.*"\([^"]*\)".*/\1/')
        CURRENT_CODE=$(grep "versionCode" app/build.gradle | sed 's/.*\([0-9]\+\).*/\1/')
        
        echo "Version actuelle: $CURRENT_VERSION (code: $CURRENT_CODE)"
        
        # Calculer la nouvelle version basée sur la date et le commit
        NEW_VERSION="1.$(date +'%m%d')"  # Format: 1.MMDD (ex: 1.0819 pour le 19 août)
        NEW_CODE=$((CURRENT_CODE + 1))
        
        echo "Nouvelle version: $NEW_VERSION (code: $NEW_CODE)"
        
        # Mettre à jour le fichier build.gradle
        sed -i "s/versionCode $CURRENT_CODE/versionCode $NEW_CODE/" app/build.gradle
        sed -i "s/versionName \"$CURRENT_VERSION\"/versionName \"$NEW_VERSION\"/" app/build.gradle
        
        echo "✅ Version mise à jour automatiquement"

    - name: Build Release APK (unsigned)
      run: ./gradlew assembleRelease

    - name: Decode Keystore
      if: ${{ github.event_name != 'pull_request' }}
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        if [ -n "$KEYSTORE_BASE64" ]; then
          echo "$KEYSTORE_BASE64" | base64 -d > nextjs-client-release.keystore
          echo "✅ Keystore décodé depuis les secrets"
        else
          echo "⚠️ Pas de keystore configuré - APK non signé"
        fi

    - name: Build Release APK (signed)
      if: ${{ github.event_name != 'pull_request' }}
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [ -n "$KEYSTORE_BASE64" ]; then
          ./gradlew assembleRelease
          echo "✅ APK Release signé généré"
        else
          echo "⚠️ Signature non disponible"
        fi


    - name: Generate version info
      id: version
      run: |
        echo "VERSION_NAME=v$(date +'%Y%m%d')-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Upload Release APK (unsigned)
      uses: actions/upload-artifact@v4
      with:
        name: app-release-unsigned-${{ steps.version.outputs.COMMIT_HASH }}
        path: app/build/outputs/apk/release/app-release-unsigned.apk
        retention-days: 90

    - name: Upload Release APK (signed)
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/upload-artifact@v4
      with:
        name: app-release-signed-${{ steps.version.outputs.COMMIT_HASH }}
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 90
      continue-on-error: true


    - name: Get APK info
      id: apk_info
      run: |
        RELEASE_SIZE=$(du -h app/build/outputs/apk/release/app-release-unsigned.apk | cut -f1)
        echo "RELEASE_SIZE=$RELEASE_SIZE" >> $GITHUB_OUTPUT
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          SIGNED_SIZE=$(du -h app/build/outputs/apk/release/app-release.apk | cut -f1)
          echo "SIGNED_SIZE=$SIGNED_SIZE" >> $GITHUB_OUTPUT
          echo "SIGNED_AVAILABLE=true" >> $GITHUB_OUTPUT
        else
          echo "SIGNED_AVAILABLE=false" >> $GITHUB_OUTPUT
        fi

    - name: Comment PR with APK info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## 📱 APK Build Results
          
          **✅ Build Status:** Success
          **🔍 Commit:** \`${{ steps.version.outputs.COMMIT_HASH }}\`
          **📅 Build Time:** ${{ steps.version.outputs.BUILD_TIME }}
          
          ### 📦 Generated APKs
          | Type | Size | Download |
          |------|------|----------|
          | Release (unsigned) | ${{ steps.apk_info.outputs.RELEASE_SIZE }} | [Download](../actions/runs/${{ github.run_id }}) |
          ${${{ steps.apk_info.outputs.SIGNED_AVAILABLE }} === 'true' ? `| Release (signed) | ${{ steps.apk_info.outputs.SIGNED_SIZE }} | [Download](../actions/runs/${{ github.run_id }}) |` : ''}
          
          > 💡 APKs are available in the **Artifacts** section of the workflow run.`
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          })

  # Job pour créer des releases nightly (uniquement sur main)
  nightly-release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate version info
      id: version
      run: |
        echo "VERSION_NAME=nightly-$(date +'%Y%m%d')-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "app-*-${{ steps.version.outputs.COMMIT_HASH }}"
        path: ./apks/
        merge-multiple: true

    - name: Delete existing nightly release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Supprimer la release nightly existante s'il y en a une
        if gh release view nightly >/dev/null 2>&1; then
          gh release delete nightly -y
          echo "✅ Ancienne release nightly supprimée"
        fi
        
        # Supprimer le tag nightly existant s'il y en a un
        if git tag | grep -q "^nightly$"; then
          git push --delete origin nightly || true
          echo "✅ Ancien tag nightly supprimé"
        fi

    - name: Create nightly release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Lire la version de l'APK
        APK_VERSION=$(grep "versionName" app/build.gradle | sed 's/.*"\([^"]*\)".*/\1/')
        echo "Version APK: $APK_VERSION"
        
        # Générer le changelog depuis les derniers commits
        CHANGELOG=$(git log --oneline -10 --pretty=format:"- %s (%h)" | head -10)
        
        # Créer la release nightly
        gh release create nightly \
          --title "🌙 Nightly Build - Version $APK_VERSION - ${{ steps.version.outputs.VERSION_NAME }}" \
          --notes "## 🚀 Version de Développement Automatique

        **📱 Version:** \`$APK_VERSION\`  
        **📅 Build Time:** ${{ steps.version.outputs.BUILD_TIME }}  
        **🔍 Commit:** \`${{ steps.version.outputs.COMMIT_HASH }}\`  
        **🌟 Branch:** \`main\`

        ### ⚠️ Avertissement
        Cette version est générée automatiquement depuis la branche de développement. Elle peut contenir des bugs et des fonctionnalités instables. Utilisez-la à vos risques et périls.

        ### 📋 Dernières Modifications
        $CHANGELOG

        ### 📱 Installation
        1. Téléchargez l'APK souhaité ci-dessous
        2. Activez \"Sources inconnues\" dans les paramètres Android
        3. Installez l'APK téléchargé
        4. Profitez des dernières fonctionnalités !

        ### 📦 Versions Disponibles
        - **app-debug.apk**: Version debug avec logs détaillés
        - **app-release-unsigned.apk**: Version release non signée
        - **app-release-signed.apk**: Version release signée (si disponible)

        ---
        🤖 **Build automatique** généré par GitHub Actions" \
          --prerelease \
          --latest=false \
          ./apks/*

        echo "✅ Release nightly créée avec succès"

    - name: Notification de succès
      run: |
        echo "🎉 Build et release nightly terminés avec succès !"
        echo "📱 APKs disponibles dans les artifacts et la release nightly"
        echo "🔗 Release: https://github.com/${{ github.repository }}/releases/tag/nightly"